// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.

/// <reference types="mocha" />

import { assert } from 'chai';
import * as ts from 'typescript';
import * as fsx from 'fs-extra';
import * as path from 'path';
import Extractor from '../../Extractor';
import ApiFileGenerator from '../../generators/ApiFileGenerator';
import { Span } from '../Span';

/* tslint:disable:no-function-expression - Mocha uses a poorly scoped "this" pointer */

function assertFileMatchesExpected(actualFilename: string, expectedFilename: string): void {
  const actualContent: string = fsx.readFileSync(actualFilename).toString('utf8');
  const expectedContent: string = fsx.readFileSync(expectedFilename).toString('utf8');

  assert(ApiFileGenerator.areEquivalentApiFileContents(actualContent, expectedContent),
    'The file content does not match the expected value:'
    + '\nEXPECTED: ' + expectedFilename
    + '\nACTUAL: ' + actualFilename);
}

describe('Span tests', function (): void {
  this.timeout(10000);

  const inputFolder: string = './testInputs/example1';
  const compilerOptions: ts.CompilerOptions = {
    target: ts.ScriptTarget.ES5,
    module: ts.ModuleKind.CommonJS,
    moduleResolution: ts.ModuleResolutionKind.NodeJs,
    rootDir: inputFolder,
    typeRoots: ['./'] // We need to ignore @types in these tests
  };
  const extractor: Extractor = new Extractor({
    compilerOptions: compilerOptions
  });

  extractor.analyze({
    entryPointFile: path.join(inputFolder, 'index.ts')
  });

  describe('Example 1', function (): void {
    it('should parse as expected', function (): void {

      const outputFilename: string = path.join(__dirname, '../../../temp/SpanTest1.txt');
      const expectedOutputFilename: string = path.join(__dirname, '../../../testInputs/SpanTest1-Expected.txt');

      const rootSpan: Span = new Span(extractor.package.getDeclaration());
      fsx.writeFileSync(outputFilename, rootSpan.getDump());

      assertFileMatchesExpected(outputFilename, expectedOutputFilename);
    });

    it('should parse as expected', function (): void {

      const outputFilename: string = path.join(__dirname, '../../../temp/SpanTest2.ts');
      const expectedOutputFilename: string = path.join(__dirname, '../../../testInputs/SpanTest2-Expected.ts');

      const rootSpan: Span = new Span(extractor.package.getDeclaration());

      rootSpan.modify((span: Span, previousSpan: Span | undefined, parentSpan: Span | undefined) => {
        switch (span.kind) {
          case ts.SyntaxKind.JSDocComment:
            // Delete JSDoc comments
            span.modification.skipAll();
            break;
          case ts.SyntaxKind.Block:
            // Replace code blocks with a semicolon
            span.modification.prefix = ';';
            span.modification.skipChildren = true;
            span.modification.suffix = span.getLastInnerSeparator();
            if (previousSpan) {
              previousSpan.modification.skipSeparatorAfter = true;
            }
        }
      });

      fsx.writeFileSync(outputFilename, rootSpan.getModifiedText());

      assertFileMatchesExpected(outputFilename, expectedOutputFilename);
    });
  });
});

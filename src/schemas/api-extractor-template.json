{
  "$schema": "https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json",

  /**
   * Optionally specifies another JSON config file that this file extends from.  This provides a way for
   * standard settings to be shared across multiple projects.
   *
   * If the first path segment is "." or "..", the path resolved relative to the folder of the file with
   * the "extends" field.  Otherwise, the first path segment is interpreted as an NPM package name, and will be
   * resolved using NodeJS require().
   *
   * DEFAULT VALUE: ""
   */
  // "extends": "./shared/api-extractor-base.json"
  // "extends": "my-package/include/api-extractor-base.json"

  /**
    * (REQUIRED) Specifies the .d.ts file to be used as the starting point for analysis.  API Extractor
    * analyzes the symbols exported by this module.
    *
    * The file extension must be ".d.ts" and not ".ts".
    * The path is resolved relative to the "rootFolder" location.
    */
  "mainEntryPointFile": "./lib/index.d.ts",

  /**
   * Determines how the TypeScript compiler engine will be invoked by API Extractor.
   */
  "compiler": {
    /**
     * The root folder for the project.  This folder typically contains the tsconfig.json and package.json
     * config files.
     *
     * The "rootFolder" path is resolved relative to the folder containing api-extractor.json.
     *
     * The default value for "rootFolder" is the token "<lookup>", which means the folder is determined by traversing
     * parent folders, starting from the folder containing api-extractor.json, and stopping at the first folder
     * that contains a tsconfig.json file.  If a tsconfig.json file cannot be found in this way, then an error
     * will be reported.
     *
     * DEFAULT VALUE: "<lookup>"
     */
    // "rootFolder": "",

    /**
     * Provides already parsed tsconfig.json contents conforming to the TypeScript tsconfig schema:
     * http://json.schemastore.org/tsconfig
     *
     * If omitted, then the tsconfig.json file will instead be read from the rootFolder.
     *
     * DEFAULT VALUE: no overrideTsconfig section
     */
    // "overrideTsconfig": {
    //   . . .
    // }

    /**
     * This option causes the compiler to be invoked with the --skipLibCheck option. This option is not recommended
     * and may cause API Extractor to produce incomplete or incorrect declarations, but it may be required when
     * dependencies contain declarations that are incompatible with the TypeScript engine that API Extractor uses
     * for its analysis.  Where possible, the underlying issue should be fixed rather than relying on skipLibCheck.
     *
     * DEFAULT VALUE: false
     */
    // "skipLibCheck": true,
  },

  /**
   * Configures how the API report file (*.api.md) will be generated.
   */
  "apiReport": {
    /**
     * (REQUIRED) Whether to generate an API report.
     */
    "enabled": true,

    /**
     * The filename for the API report files.  It will be combined with "trackedFolder" or "tempFolder" to produce
     * a full output filename.
     *
     * The file extension should be ".api.md", and the string should not contain a path separator such as "\" or "/".
     *
     * DEFAULT VALUE: "<unscopedPackageName>.api.md"
     */
    // "reportFileName": "<unscopedPackageName>.api.md",

    /**
     * Specifies the folder where the API report file is written.  The file name portion is determined by
     * the "reportFileName" setting.
     *
     * The API report file is normally tracked by Git.  Changes to it can be used to trigger a branch policy,
     * e.g. for an API review.
     *
     * The path is resolved relative to the "rootFolder" location.
     *
     * DEFAULT VALUE: "./etc"
     */
    // "reportFolder": "./etc",

    /**
     * Specifies the folder where the temporary report file is written.  The file name portion is determined by
     * the "reportFileName" setting.
     *
     * After the temporary file is written to disk, it is compared with the file in the "reportFolder".
     * If they are different, a production build will fail.
     *
     * The path is resolved relative to the "rootFolder" location.
     *
     * DEFAULT VALUE: "./temp"
     */
    // "tempFolder": "./temp"
  },

  /**
   * Configures how the doc model file (*.api.json) will be generated.
   */
  "docModel": {
    /**
     * (REQUIRED) Whether to generate doc model file.
     */
    "enabled": true,

    /**
     * The output path for the doc model file.  The file extension should be ".api.json".
     *
     * The path is resolved relative to the "rootFolder" location.
     *
     * DEFAULT VALUE: "./temp/<unscopedPackageName>.api.json"
     */
    // "apiJsonFilePath": "./temp/<unscopedPackageName>.api.json"
  },

  /**
   * Configures how the .d.ts rollup file will be generated.
   */
  "dtsRollup": {
    /**
     * (REQUIRED) Whether to generate the .d.ts rollup file.
     */
    "enabled": true,

    /**
     * Specifies the output path for a .d.ts rollup file to be generated without any trimming.
     * This file will include all declarations that are exported by the main entry point.
     *
     * If the path is an empty string, then this file will not be written.
     *
     * The path is resolved relative to the "rootFolder" location.
     *
     * DEFAULT VALUE: "./dist/<unscopedPackageName>.d.ts"
     */
    // "untrimmedFilePath": "./dist/<unscopedPackageName>.d.ts",

    /**
     * Specifies the output path for a .d.ts rollup file to be generated with trimming for a "beta" release.
     * This file will include only declarations that are marked as "@public" or "@beta".
     *
     * If the path is an empty string, then this file will not be written.
     *
     * The path is resolved relative to the "rootFolder" location.
     *
     * DEFAULT VALUE: ""
     */
    // "betaTrimmedFilePath": "./dist/<unscopedPackageName>-beta.d.ts",


    /**
     * Specifies the output path for a .d.ts rollup file to be generated with trimming for a "public" release.
     * This file will include only declarations that are marked as "@public".
     *
     * If the path is an empty string, then this file will not be written.
     *
     * The path is resolved relative to the "rootFolder" location.
     *
     * DEFAULT VALUE: ""
     */
    // "publicTrimmedFilePath": "./dist/<unscopedPackageName>-public.d.ts",
  },

  /**
   * Configures how the tsdoc-metadata.json file will be generated.
   */
  "tsdocMetadata": {
    /**
     * Whether to generate the tsdoc-metadata.json file.
     *
     * DEFAULT VALUE: true
     */
    // "enabled": true,

    /**
     * Specifies where the TSDoc metadata file should be written.
     *
     * The default value is "<lookup>", which causes the path to be automatically inferred from the "tsdocMetadata",
     * "typings" or "main" fields of the project's package.json.  If none of these fields are set, the lookup
     * falls back to "./tsdoc-metadata.json".
     *
     * DEFAULT VALUE: "<lookup>"
     */
    // "tsdocMetadataFilePath": "./dist/tsdoc-metadata.json"
  },

  /**
   * Configures how API Extractor reports error and warning messages produced during analysis.
   *
   * There are three sources of messages:  compiler messages, API Extractor messages, and TSDoc messages.
   */
  "messages": {
    /**
     * Configures handling of diagnostic messages reported by the TypeScript compiler engine while analyzing
     * the input .d.ts files.
     *
     * TypeScript message identifiers start with "TS" followed by an integer.  For example: "TS2551"
     *
     * DEFAULT VALUE:  A single "default" entry with logLevel=warning.
     */
    "compilerMessageReporting": {
      /**
       * Configures the default routing for messages that don't match an explicit rule in this table.
       */
      "default": {
        /**
         * Specifies whether the message should be written to the the tool's output log.  Note that
         * the "addToApiReviewFile" property may supersede this option.
         *
         * Possible values: "error", "warning", "none"
         *
         * DEFAULT VALUE: "warning"
         */
        // "logLevel": "warning",

        /**
         * When addToApiReviewFile is true:  If API Extractor is configured to write an API report file (.api.md),
         * then the message will be written inside that file; otherwise, the message is instead logged according to
         * the "logLevel" option.
         *
         * DEFAULT VALUE: false
         */
        // "addToApiReviewFile": false
      },

      // "TS2551": {
      //   "logLevel": "warning",
      //   "addToApiReviewFile": true
      // },
      //
      // . . .
    },

    /**
     * Configures handling of messages reported by API Extractor during its analysis.
     *
     * API Extractor message identifiers start with "ae-".  For example: "ae-extra-release-tag"
     *
     * DEFAULT VALUE: See api-extractor-defaults.json for the complete table of extractorMessageReporting mappings
     */
    "extractorMessageReporting": {
      "default": {
        // "logLevel": "warning",
        // "addToApiReviewFile": false
      },

      // "ae-extra-release-tag": {
      //   "logLevel": "warning",
      //   "addToApiReviewFile": true
      // },
      //
      // . . .
    },

    /**
     * Configures handling of messages reported by the TSDoc parser when analyzing code comments.
     *
     * TSDoc message identifiers start with "tsdoc-".  For example: "tsdoc-link-tag-unescaped-text"
     *
     * DEFAULT VALUE:  A single "default" entry with logLevel=warning.
     */
    "tsdocMessageReporting": {
      "default": {
        // "logLevel": "warning",
        // "addToApiReviewFile": false
      }

      // "tsdoc-link-tag-unescaped-text": {
      //   "logLevel": "warning",
      //   "addToApiReviewFile": true
      // },
      //
      // . . .
    }
  }

}
